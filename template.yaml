AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  nems-subscriber

  Sample SAM Template for nems-subscriber

Parameters:
  pdsJwtAud:
    Type: String
    Default: "https://int.api.service.nhs.uk/oauth2/token"
  pdsJwtKid:
    Type: String
    Default: "int-1"
  pdsBaseUrl:
    Type: String
    Default: "https://int.api.service.nhs.uk"
  managementInterfaceBaseUrl:
    Type: String
    Default: "https://staging.hans.service.thepsc.co.uk/"
  domainName:
    Type: String
    Default: "api-staging.hans.service.thepsc.co.uk"
  hostedZoneId:
    Type: String
    Default: "Z0749399NWCFPUQORL8R"
  secretName:
    Type: String
    Default: "nhs-hans-staging"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: hans
        LOG_LEVEL: INFO

# AWS SAM Spec is here: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
Resources:
  DomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref domainName
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName: !Ref domainName
        HostedZoneId: !Ref hostedZoneId
  APIGatewayPublic:
    Type: AWS::Serverless::Api
    Properties:
      Description: Domain configured API gateway for public-facing APIs
      Domain:
        CertificateArn: !Ref DomainCertificate
        DomainName: !Ref domainName
        Route53:
          HostedZoneId: !Ref hostedZoneId
      StageName: Prod
  NEMSSubscriptionCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/nems_subscription_create/
      Handler: app.lambda_handler
      Runtime: python3.9
      Description: Lambda function that creates a NEMS subscription for a given CareRecipient
      Architectures:
        - x86_64
      Events:
        NEMSSubscriptionCreate:
          Type: Api
          Properties:
            Path: /subscription
            Method: post
            RestApiId: !Ref APIGatewayPublic
      Environment:
        Variables:
          PDS_JWT_RSA_PRIVATE_KEY: !Join
            - ""
            - - "{{resolve:secretsmanager:"
              - !Ref secretName
              - ":SecretString:PDS_JWT_RSA_PRIVATE_KEY}}"
          PDS_JWT_SUB: !Join
            - ""
            - - "{{resolve:secretsmanager:"
              - !Ref secretName
              - ":SecretString:PDS_JWT_SUB}}"
          PDS_JWT_ISS: !Join
            - ""
            - - "{{resolve:secretsmanager:"
              - !Ref secretName
              - ":SecretString:PDS_JWT_ISS}}"
          PDS_API_KEY: !Join
            - ""
            - - "{{resolve:secretsmanager:"
              - !Ref secretName
              - ":SecretString:PDS_API_KEY}}"
          PDS_JWT_AUD: !Ref pdsJwtAud
          PDS_JWKS_KID: !Ref pdsJwtKid
          PDS_BASE_URL: !Ref pdsBaseUrl
  NEMSSubscriptionDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/nems_subscription_delete/
      Handler: app.lambda_handler
      Runtime: python3.9
      Description: Lambda function that deletes a NEMS subscription for a given CareRecipient
      Architectures:
        - x86_64
      Events:
        NEMSSubscriptionDelete:
          Type: Api
          Properties:
            Path: /subscription/{id}
            Method: delete
            RestApiId: !Ref APIGatewayPublic
  UnprocessedMessageQueue:
    Type: AWS::SQS::Queue
  EmailCareProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/email_care_provider
      Handler: app.lambda_handler
      Runtime: python3.9
      Description: Lambda function that processes messages from the queue and sends emails to care providers
      Architectures:
        - x86_64
      Events:
        NewUnprocessedMessage:
          Type: SQS
          Properties:
            Queue: !GetAtt UnprocessedMessageQueue.Arn
            BatchSize: 10
            Enabled: True
      Environment:
        Variables:
          MANAGEMENT_INTERFACE_BASE_URL: !Ref managementInterfaceBaseUrl
          NOTIFY_API_KEY: !Join
            - ""
            - - "{{resolve:secretsmanager:"
              - !Ref secretName
              - ":SecretString:NOTIFY_API_KEY}}"
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeadLetterQueue.Arn
  DeadLetterQueue:
    Type: AWS::SQS::Queue
  ConvertHL7v2ToFhirFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/convert_hl7v2_fhir/
      Handler: app.lambda_handler
      Runtime: python3.9
      Description: Lambda function that converts HL7v2 (over HTTPs) to FHIR
      Architectures:
        - x86_64
      Events:
        ConvertHL7v2:
          Type: Api
          Properties:
            Path: /message/hl7v2
            Method: post
            RestApiId: !Ref APIGatewayPublic
      Timeout: 30
      Environment:
        Variables:
          SQS_CONVERTED_QUEUE_URL: !GetAtt UnprocessedMessageQueue.QueueUrl
      Policies:
      - Statement:
        - Sid: AllowQueueSendMessage
          Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt UnprocessedMessageQueue.Arn
  
      

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ManageAPI:
    Description: "API Gateway endpoint URL for Prod stage for Create NEMS Subscription function"
    Value: !Sub "https://${APIGatewayPublic}.execute-api.${AWS::Region}.amazonaws.com/Prod/subscription"
  NEMSSubscriptionCreateFunction:
    Description: "NEMS Subscription Create Lambda Function ARN"
    Value: !GetAtt NEMSSubscriptionCreateFunction.Arn
  NEMSSubscriptionCreateFunctionIamRole:
    Description: "Implicit IAM Role created for NEMS Subscription Create function"
    Value: !GetAtt NEMSSubscriptionCreateFunctionRole.Arn
  NEMSSubscriptionDeleteFunction:
    Description: "NEMS Subscription Delete Lambda Function ARN"
    Value: !GetAtt NEMSSubscriptionDeleteFunction.Arn
  NEMSSubscriptionDeleteFunctionIamRole:
    Description: "Implicit IAM Role created for NEMS Subscription Delete function"
    Value: !GetAtt NEMSSubscriptionDeleteFunctionRole.Arn
  MESHCheckMailboxFunction:
    Description: "MESH Check Mailbox Lambda Function ARN"
    Value: !GetAtt EmailCareProviderFunction.Arn
  MESHCheckMailboxFunctionIamRole:
    Description: "Implicit IAM Role created for MESH Check Mailbox function"
    Value: !GetAtt EmailCareProviderFunctionRole.Arn
  EmailCareProviderFunction:
    Description: "Email Care Provider Lambda Function ARN"
    Value: !GetAtt EmailCareProviderFunction.Arn
  EmailCareProviderFunctionIamRole:
    Description: "Implicit IAM Role created for Email Care Provider function"
    Value: !GetAtt EmailCareProviderFunctionRole.Arn
  UnprocessedMessageQueueUrl:
    Description: "URL for queue containing messages to be processed"
    Value: !GetAtt UnprocessedMessageQueue.QueueUrl
